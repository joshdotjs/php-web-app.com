// <Header>
header#navbar { position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
   
  nav {
    .gutter {
      height: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
  }
  
  nav#top {
    background: darkorange;
    .gutter {
      ul#nav-links {
        background: lightblue;
      
        li.nav-link {
          cursor: pointer;
          display: inline-block;
          &:not(:last-child) {
            margin-right: 1.5rem;
          }
        }
      }
    }
    
  }
  
  nav#bottom {
    background: lightblue;
    .gutter {

      // #logo {
      //   margin: 0;
      // }
    
      #cart-btn {  position: relative;
        // position: absolute;
        // top: 50%;
        // transform: translateY(-50%);
        // right: $px;   
        // outline: dashed white 10px;
        
        // -Combine this with the scale factor of the hidden-target.
        height: 50px;
        width: 50px;
      
        color: black;
        background: white;
        padding: 0.75rem;
      
        border-radius: 0.25rem;
        box-shadow: 0 1rem 2rem hsla(0 0% 0% / 0.2);

        cursor: pointer;

        // svg {
        //   max-width: 50px;
        //   max-height: 50px;
        // }

        // -status === 'entered' => child of li.box
        // -status === 'exiting' => child of #hidden-target
        // -Scaling of .box-child:
        //      -3 heights/widths set:
        //        --1. .box-child
        //        --2. .box           (parent in status: 'entered')
        //        --3. #hidden-target (parent in status: 'exiting')
        //      -Height/Width is set to $box-size on all 3-elements.
        //      -transform: scale(0.1) is set on the #hiden-target and this is the size the card animates to during animation.
        //
        //      --On page load we get the height and width of the first card via JS 
        //        (analagous to how we are handling the height of the grid).
        //      --Then, we use these values in inline styles set in JSX for .box-child in px-values.
        //      --Advantage:
        //        ---Doing it this way allows the grid to be dynamically sized based on the size of the screen.
        //        ---But in order to do the scaling animation correctly during FLIP we need to explicitly set the height
        //           and width to constant values, which we achieve as described above.

        // .box-child is moved here
        #hidden-target { position: absolute;
          top: 0;
          left: 0;
          // background: rgba(255, 255, 0, 0.5);
          $target-size: 250px; 
          height: $target-size;
          width: $target-size;
          transform: scale(0.1); // this transforms the height / width => the animated card will end up this height
          transform-origin: 20px 20px; // top left
          
          // .box-child lives here during status: 'exiting'
          div.box-child {}
        }



        #cart-count { position: absolute;
          top: -5px;
          right: -5px;
          background: black;
          color: white;
          border-radius: 50%;
          height: 20px;
          width: 20px;

          span { 
            height: 100%;
            width: 100%;
            // background: rgba(0, 0, 0, 0.5);
            display: grid;
            place-items: center;
            font-size: 0.8rem;
          }

        }
      }
    }
  }
}// </ Header>